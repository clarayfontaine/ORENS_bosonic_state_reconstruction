import numpy as np
from qutip import *
import scipy as sc

# Choose "ORENS" or "Wigner"
which_ORENS_or_W = "ORENS"

D = 6
nD = D**2 - 1
nTargets = D**2 - 1

# FOR BAYESIAN SPREAD AROUND RHO_LS WHEN SAMPLING
reps_sim = 10000000
N_sim = reps_sim * nD

reps_exp = 1000
N_exp = reps_exp * nD


# FOCK STATE LIST FOR FIDELITY V DIMENSION EXPERIMENT
if D == 2:
    fock_state_list = np.array(["fock0", "fock01", "fock0i1", "fock1"])
elif D == 3:
    fock_state_list = np.array(
        [
            "fock0",
            "fock01",
            "fock0i1",
            "fock02",
            "fock0i2",
            "fock1",
            "fock12",
            "fock1i2",
            "fock2",
        ]
    )
elif D == 4:
    fock_state_list = np.array(
        [
            "fock0",
            "fock01",
            "fock0i1",
            "fock02",
            "fock0i2",
            "fock1",
            "fock03",
            "fock0i3",
            "fock12",
            "fock1i2",
            "fock13",
            "fock1i3",
            "fock2",
            "fock23",
            "fock2i3",
            "fock3",
        ]
    )
elif D == 5:
    fock_state_list = np.array(
        [
            "fock0",
            "fock01",
            "fock0i1",
            "fock02",
            "fock0i2",
            "fock1",
            "fock03",
            "fock0i3",
            "fock12",
            "fock1i2",
            "fock04",
            "fock0i4",
            "fock13",
            "fock1i3",
            "fock2",
            "fock14",
            "fock1i4",
            "fock23",
            "fock2i3",
            "fock24",
            "fock2i4",
            "fock3",
            "fock34",
            "fock3i4",
            "fock4",
        ]
    )
elif D == 6:
    fock_state_list = np.array(
        [
            "fock0",
            "fock01",
            "fock0i1",
            "fock02",
            "fock0i2",
            "fock1",
            "fock03",
            "fock0i3",
            "fock12",
            "fock1i2",
            "fock04",
            "fock0i4",
            "fock13",
            "fock1i3",
            "fock2",
            "fock05",
            "fock0i5",
            "fock14",
            "fock1i4",
            "fock23",
            "fock2i3",
            "fock15",
            "fock1i5",
            "fock24",
            "fock2i4",
            "fock3",
            "fock25",
            "fock2i5",
            "fock34",
            "fock3i4",
            "fock35",
            "fock3i5",
            "fock4",
            "fock45",
            "fock4i5",
            "fock5",
        ]
    )
elif D == 7:
    fock_state_list = np.array(
        [
            "fock0",
            "fock01",
            "fock02",
            "fock03",
            "fock04",
            "fock05",
            "fock0i1",
            "fock0i2",
            "fock0i3",
            "fock0i4",
            "fock0i5",
            "fock1",
            "fock12",
            "fock13",
            "fock14",
            "fock15",
            "fock1i2",
            "fock1i3",
            "fock1i4",
            "fock1i5",
            "fock2",
            "fock23",
            "fock24",
            "fock25",
            "fock2i3",
            "fock2i4",
            "fock2i5",
            "fock3",
            "fock34",
            "fock35",
            "fock3i4",
            "fock3i5",
            "fock4",
            "fock45",
            "fock4i5",
            "fock5",
            "fock6",
            "fock06",
            "fock0i6",
            "fock16",
            "fock1i6",
            "fock26",
            "fock2i6",
            "fock36",
            "fock3i6",
            "fock46",
            "fock4i6",
            "fock56",
            "fock5i6",
        ]
    )
elif D == 8:
    fock_state_list = np.array(
        [
            "fock0",
            "fock01",
            "fock02",
            "fock03",
            "fock04",
            "fock05",
            "fock0i1",
            "fock0i2",
            "fock0i3",
            "fock0i4",
            "fock0i5",
            "fock1",
            "fock12",
            "fock13",
            "fock14",
            "fock15",
            "fock1i2",
            "fock1i3",
            "fock1i4",
            "fock1i5",
            "fock2",
            "fock23",
            "fock24",
            "fock25",
            "fock2i3",
            "fock2i4",
            "fock2i5",
            "fock3",
            "fock34",
            "fock35",
            "fock3i4",
            "fock3i5",
            "fock4",
            "fock45",
            "fock4i5",
            "fock5",
            "fock6",
            "fock06",
            "fock0i6",
            "fock16",
            "fock1i6",
            "fock26",
            "fock2i6",
            "fock36",
            "fock3i6",
            "fock46",
            "fock4i6",
            "fock56",
            "fock5i6",
            "fock7",
            "fock07",
            "fock0i7",
            "fock17",
            "fock1i7",
            "fock27",
            "fock2i7",
            "fock37",
            "fock3i7",
            "fock47",
            "fock4i7",
            "fock57",
            "fock5i7",
            "fock67",
            "fock6i7",
        ]
    )


# CAT STATE LIST FOR FIDELITY V T2
cat_state_list = np.array(["cat-eve-1", "cat-nmp-1", "cat-nop-1", "cat-odd-1"])

# DISPLACEMENT POINTS
if nD == D**2 - 1 and which_ORENS_or_W == "ORENS":
    print("USING ORENS OBSERVABLES")
    if D == 6:
        disp_points = np.array(
            [
                -0.29901936 + 0.30107442j,
                1.31550604 + 0.46189677j,
                -1.16261678 - 0.61929378j,
                1.58886075 + 0.64781325j,
                0.13606655 + 0.32837657j,
                -1.86594222 + 0.45202629j,
                -0.31933885 - 0.15889382j,
                -0.48739529 - 0.57039925j,
                -1.64394525 + 0.11127734j,
                -0.62975346 + 1.54034735j,
                0.69525459 + 1.63408855j,
                0.04596351 - 1.62667434j,
                1.33782511 - 0.39764836j,
                1.0631099 + 1.10924117j,
                0.03674926 + 0.98300086j,
                -0.17280168 + 0.65962388j,
                -0.65887718 - 1.20825672j,
                -0.4067976 + 1.9124443j,
                0.72576958 - 0.74479956j,
                0.15909053 - 0.67754237j,
                1.73736896 - 0.32688885j,
                1.62015323 - 1.1541361j,
                -0.94609328 - 0.03238579j,
                -0.87069649 - 1.46317476j,
                0.74912573 + 0.5463585j,
                0.44850373 + 1.41208289j,
                0.01783366 - 0.46771376j,
                0.63807747 + 0.10765108j,
                -1.35818534 + 0.88801294j,
                0.97113631 - 1.23230158j,
                -1.45468059 - 0.89077127j,
                -0.64567766 + 0.11294293j,
                -0.82098956 + 0.82491462j,
                0.38110838 - 0.05674902j,
                0.06937847 - 1.27983945j,
            ]
        )
        TM1 = 0
        TM2 = 0
        TM3 = 0
        TM4 = 0
        TM5 = nD  # 70 points measured p5
        TM6 = 0
        TM7 = 0
    elif D == 5:
        # D5
        disp_points = np.array(
            [
                -0.99608485 - 0.95782355j,
                -0.15608897 - 1.46497792j,
                0.19347234 - 1.90201636j,
                0.59810269 - 0.80789026j,
                -0.15841118 - 0.35164963j,
                -0.21137942 - 0.97874056j,
                -0.63025733 + 0.85241428j,
                0.2877099 - 0.57789518j,
                1.0498689 - 0.03614941j,
                0.48720339 + 1.43656241j,
                -0.65342741 - 0.02548706j,
                -0.33797072 + 0.17899989j,
                0.37606688 - 0.08194524j,
                0.97262683 + 1.67531163j,
                -1.62534853 + 0.66813811j,
                -0.60112067 + 1.30759734j,
                -0.86636593 - 0.57182937j,
                1.25577222 - 0.60587946j,
                -1.35020912 + 0.08525212j,
                0.82794333 + 0.60924308j,
                0.08001385 + 1.05303051j,
                -1.73550769 - 0.15422794j,
                0.36651801 + 0.54864949j,
                1.36117706 + 0.1420981j,
            ]
        )
        TM1 = 0
        TM2 = 0
        TM3 = 0
        TM4 = nD
        TM5 = 0
        TM6 = 0
        TM7 = 0
    elif D == 4:
        # D4
        disp_points = np.array(
            [
                -0.03344048 + 0.52446333j,
                -0.51662472 - 1.2697308j,
                0.46899708 - 0.98300738j,
                -0.58261127 - 0.7875527j,
                0.41186546 - 0.43269297j,
                1.3094303 - 0.43118447j,
                0.9468576 - 0.01964382j,
                -0.87240897 + 0.10603879j,
                0.25763001 + 0.78390892j,
                -1.34084426 - 0.13845313j,
                -0.83525302 + 1.44035704j,
                -0.52583568 + 0.00609423j,
                0.10275639 + 1.31736842j,
                -0.84888049 + 0.96396485j,
                0.95250993 + 0.76820361j,
            ]
        )
        TM1 = 0
        TM2 = 0
        TM3 = nD
        TM4 = 0
        TM5 = 0
        TM6 = 0
        TM7 = 0
    elif D == 3:
        # D3
        # V1
        disp_points = np.array(
            [
                -1.88124007 - 0.41974105j,
                0.81710353 - 0.99136264j,
                -1.20311057 + 0.49263973j,
                -0.51682512 - 0.71604832j,
                -0.74221237 + 0.11705172j,
                -0.09409675 - 0.12949668j,
                0.34524893 - 0.66610088j,
                0.09170477 - 1.89847226j,
            ]
        )
        TM1 = nD
        TM2 = 0
        TM3 = 0
        TM4 = 0
        TM5 = 0
        TM6 = 0
        TM7 = 0
        # TM = n_dis #no of time multiplexing instances
    elif D == 2:
        disp_points = np.array(
            [
                -0.82930559 + 0.02918798j,
                -0.1095313 + 1.55126898j,
                -1.24170475 - 0.18726763j,
            ]
        )
        TM1 = nD
        TM2 = 0
        TM3 = 0
        TM4 = 0
        TM5 = 0
        TM6 = 0
        TM7 = 0
    elif D == 7:
        disp_points = np.array(
            [
                -1.10489679 + 0.88867714j,
                -1.73259164 + 1.82999118j,
                -0.09126548 - 1.06880852j,
                1.07445203 + 0.78030658j,
                -0.39416681 + 1.46169228j,
                -2.21124071 + 0.66659587j,
                0.32904214 - 0.14013532j,
                -2.13791374 - 0.43290183j,
                1.46943287 + 0.01345216j,
                -0.71146073 - 1.70498637j,
                -1.52059258 - 1.45523449j,
                -1.27743006 - 0.05560755j,
                0.48548093 - 0.33195402j,
                -1.43425473 - 0.7393449j,
                0.18947951 + 0.89674472j,
                0.05048553 - 1.40534323j,
                -1.0428396 - 0.7293151j,
                -0.23890749 + 0.29622349j,
                0.49672673 + 0.37400157j,
                1.65575464 - 0.64664382j,
                0.72023289 + 1.43582593j,
                0.45130539 - 0.77239181j,
                -0.57946272 - 0.11287158j,
                0.87740062 - 1.62768815j,
                -0.72627853 + 0.78490898j,
                0.06957775 + 2.04220622j,
                -0.18032134 - 0.61184491j,
                -0.53458554 - 2.23783268j,
                0.65467427 - 1.43042505j,
                -0.89886667 + 0.20067565j,
                -0.77480846 - 0.56608695j,
                0.81718934 - 0.74177465j,
                -0.24903386 + 0.57528894j,
                0.77162405 + 0.65714491j,
                -2.41086244 - 0.51329297j,
                1.54724588 - 1.70853797j,
                -0.14310708 - 0.34993208j,
                1.20770197 - 0.87476299j,
                -1.78281635 - 1.73038716j,
                -0.9693079 + 1.78587425j,
                1.07970689 + 0.00892122j,
                1.01118266 + 1.73166043j,
                -1.71946221 + 0.79567976j,
                -1.53379639 + 0.43471652j,
                -0.06482792 + 1.15749289j,
                -0.79514618 - 1.27437589j,
                0.57353106 - 2.02327358j,
                1.52579067 + 0.74392719j,
            ]
        )
        TM1 = 0
        TM2 = 0
        TM3 = 0
        TM4 = 0
        TM5 = 0
        TM6 = nD
        TM7 = 0
    elif D == 8:
        disp_points = np.array(
            [
                0.7411223 + 0.34826411j,
                -2.12485552 + 0.21634155j,
                2.21840285 + 1.7467101j,
                1.38360081 + 0.20676265j,
                1.17350746 - 1.78462232j,
                0.21149891 - 2.31796324j,
                -0.29440407 - 0.39020791j,
                -0.0866199 + 2.19287322j,
                1.24085889 + 0.85144658j,
                1.81836955 + 0.69494005j,
                -1.5993281 + 1.3237122j,
                -1.96125316 - 0.34747138j,
                1.26539852 - 0.60233858j,
                -0.38280619 - 0.74751135j,
                0.05390621 - 1.62745739j,
                -1.63992678 - 1.66071137j,
                -1.37501938 - 0.14910742j,
                -0.99077352 - 0.42130896j,
                2.30832612 - 0.31335291j,
                0.26092271 - 0.50341671j,
                -1.66369445 - 1.09621925j,
                -0.32491952 - 1.03058769j,
                -1.02053808 + 1.58216939j,
                -0.82784153 + 2.07292656j,
                -1.39537245 - 0.74515068j,
                0.26166927 - 0.19449422j,
                1.68832018 - 0.95529995j,
                -0.33728653 + 0.39301195j,
                0.18937964 + 0.77644876j,
                0.34731765 - 0.79157969j,
                0.84078314 - 0.79471822j,
                -0.13432136 + 1.79098458j,
                -0.33321345 + 0.04003445j,
                -0.79192236 - 0.27190988j,
                0.44603636 - 1.95534622j,
                0.70824323 - 1.22848061j,
                0.41376398 + 0.18501942j,
                -0.37565888 - 2.00660825j,
                1.31709771 + 1.21187092j,
                -0.12452838 + 1.23906418j,
                1.07098102 - 1.52175656j,
                0.89456049 + 2.39773589j,
                -0.01003876 - 1.39099427j,
                -1.1780994 - 1.6270449j,
                -1.44266634 + 1.01131607j,
                1.05714909 + 1.83298086j,
                1.04793866 - 0.0205113j,
                0.74407733 - 0.37840747j,
                -0.78789428 - 1.5105107j,
                -0.74924166 - 1.10445289j,
                -0.81288094 + 1.01740402j,
                2.22988709 + 0.93376718j,
                2.03013116 + 0.11473875j,
                1.71802885 - 0.21276668j,
                -0.31259104 + 0.93917397j,
                0.78213696 + 0.72924091j,
                0.59960162 + 1.54632484j,
                -0.98366728 + 0.51740608j,
                -0.05849096 + 0.32529058j,
                -0.79994995 + 0.31189869j,
                1.95774157 - 0.97435052j,
                0.57007848 + 1.28845215j,
                -1.74495501 + 0.43776648j,
            ]
        )  # CD=4.33, all p7
        TM1 = 0
        TM2 = 0
        TM3 = 0
        TM4 = 0
        TM5 = 0
        TM6 = 0
        TM7 = nD
elif nD == 2 * (D**2 - 1) and which_ORENS_or_W == "ORENS":
    print("USING ORENS OBSERVABLES")
    if D == 6:
        disp_points = np.array(
            [
                0.70949116 + 0.00750471j,
                -0.39909565 + 0.57722426j,
                -0.19712988 - 1.28803377j,
                -1.9516473 + 0.72736993j,
                0.20328955 + 2.07886689j,
                -1.06623076 + 0.35655541j,
                -0.18634009 + 0.32100457j,
                0.01465152 + 0.59838761j,
                -0.78375261 - 0.4780837j,
                0.45394881 + 0.40530055j,
                1.60846168 + 0.49431728j,
                -1.38614106 + 0.01731454j,
                0.46131785 - 0.47655635j,
                -1.03230471 - 0.62773858j,
                0.50686799 - 2.01923508j,
                0.12618217 - 0.58993573j,
                1.00563635 + 1.82026436j,
                1.32100939 - 0.15988344j,
                2.08899776 + 0.16792552j,
                0.9720823 - 0.9894699j,
                -1.08604734 + 1.793068j,
                -0.57459515 - 2.00316924j,
                -0.22415674 + 1.23161719j,
                1.08549182 + 1.26422989j,
                -0.81159918 - 1.37059974j,
                -1.64218253 + 0.75746849j,
                -0.65714489 + 0.0162525j,
                -0.44706283 + 1.335395j,
                -2.06960669 - 0.26442765j,
                1.01441155 - 1.33262827j,
                0.48986064 - 2.03083406j,
                -1.13881294 + 1.0989605j,
                1.22627087 - 1.69444098j,
                1.93967593 - 0.791354j,
                -0.05313531 - 1.58973083j,
                -0.57285139 + 0.84628904j,
                0.77616097 + 1.0473609j,
                0.27131485 + 0.20375754j,
                -0.02075496 + 0.94075868j,
                -1.37352884 - 1.54356929j,
                1.9327085 - 0.0577477j,
                -0.23879889 + 1.69424127j,
                -1.68502384 - 1.23531494j,
                -1.87922801 - 0.4286198j,
                -1.52323966 + 0.67449371j,
                0.62324036 + 1.14641825j,
                -1.10359749 + 1.37907696j,
                -1.62462625 + 1.3190628j,
                1.62870612 - 1.30943136j,
                -1.38705061 - 0.92685164j,
                0.48127273 + 0.77389407j,
                1.54310865 - 0.55974589j,
                1.29770501 + 0.45809527j,
                -0.99055204 - 0.93960123j,
                -0.4403758 - 0.40410211j,
                -0.28665154 - 0.20466506j,
                -1.61940378 - 0.11144352j,
                0.21199313 - 0.29687021j,
                -0.21956276 - 1.90265376j,
                1.82071408 + 1.01883013j,
                -1.08345184 + 0.71917559j,
                0.34366919 - 1.19365347j,
                0.54401694 + 1.57491051j,
                -0.0756926 - 0.91692253j,
                -1.23183193 - 1.53932962j,
                0.21900766 - 1.01160548j,
                1.03330649 + 0.08936701j,
                -0.89281004 + 0.29671836j,
                0.48172831 - 1.67144482j,
                0.8933037 - 0.56602936j,
            ]
        )

        TM1 = 0
        TM2 = 0
        TM3 = 0
        TM4 = 0
        TM5 = nD  # 70 points measured p5
    elif D == 5:
        # D5
        disp_points = np.array(
            [
                1.71661686 + 0.93348203j,
                -0.25338182 - 0.26506341j,
                -0.34527044 - 1.27804057j,
                -0.50506431 - 0.93064394j,
                -0.25207247 + 1.36908749j,
                -0.84114599 + 1.13853056j,
                -1.77354721 + 0.91875451j,
                -1.75278643 + 0.33252229j,
                0.6702303 + 0.18195201j,
                1.28073963 + 0.09425066j,
                0.65636082 + 1.49222468j,
                -1.64448291 - 0.2637718j,
                1.348571 - 1.38937339j,
                1.53967348 - 0.02006251j,
                0.74981734 - 1.05256064j,
                -1.19567742 - 0.81621892j,
                -0.11398293 + 1.02264779j,
                0.61728826 - 0.38599811j,
                0.04990896 - 0.72253083j,
                -0.81883711 + 1.5741883j,
                -0.88151478 - 0.37319455j,
                -0.04131854 + 0.36102762j,
                0.85161002 - 0.59523209j,
                -0.32682922 + 1.95229678j,
                0.38948776 + 0.6840731j,
                0.2382374 - 1.00383653j,
                0.78543726 + 0.6989043j,
                0.67085095 + 1.11343815j,
                -1.93930516 + 0.49892832j,
                -0.78686183 + 0.80696306j,
                -0.12179194 + 0.57395863j,
                1.02444803 + 0.07763076j,
                1.25715069 + 0.74418476j,
                0.35503774 - 0.12777261j,
                0.05196009 - 2.00275319j,
                1.03297131 - 1.12767387j,
                -1.72656171 - 0.97274428j,
                -0.48620981 + 0.63471815j,
                -0.39395711 - 0.52727472j,
                1.88668366 - 0.51124621j,
                -1.23241381 - 0.19519337j,
                -0.97670178 - 1.4344887j,
                -1.359368 + 0.68613504j,
                0.00555144 - 1.60074988j,
                0.86513188 + 1.80485917j,
                -0.69285381 + 0.06695277j,
                -1.0178271 + 0.27054534j,
                -1.45367824 - 1.37933531j,
            ]
        )
        TM1 = 0
        TM2 = 0
        TM3 = 0
        TM4 = nD
        TM5 = 0
    elif D == 4:
        # D4
        disp_points = np.array(
            [
                -1.03214429 + 0.5916298j,
                -0.45455474 + 1.11898146j,
                -0.25339096 + 0.29096573j,
                1.13379524 + 0.29577745j,
                1.75835749 - 0.04248864j,
                -0.7553076 - 0.85341691j,
                -0.41037034 - 0.58764227j,
                -1.06794656 - 0.12542083j,
                -0.44038261 - 1.69502608j,
                1.08806597 - 0.48376914j,
                -0.10297539 - 0.37634727j,
                -0.6554898 + 0.26188992j,
                0.13979698 + 1.74132685j,
                1.61461692 - 0.47891284j,
                0.31585777 - 1.699907j,
                0.7085305 + 0.16230106j,
                0.49981681 - 0.52379023j,
                -0.64132258 + 1.61757673j,
                1.33676761 - 1.1910998j,
                -1.45887397 - 0.97273709j,
                -1.47863577 + 0.94233922j,
                0.71669944 + 0.99684688j,
                -0.25309318 - 1.22590159j,
                0.03390662 + 0.69422378j,
                0.37829366 + 0.09076727j,
                0.46037628 - 0.98282651j,
                -1.75632902 - 0.09751128j,
                0.91597111 + 1.49385106j,
                0.19962399 + 0.89937956j,
                1.58159542 + 0.9567743j,
            ]
        )
        TM1 = 0
        TM2 = 0
        TM3 = nD
        TM4 = 0
        TM5 = 0
    elif D == 3:
        # D3
        # V1
        disp_points = np.array(
            [
                -0.22138286 + 0.79232449j,
                -1.28424701 - 1.14696981j,
                -0.47954528 + 0.26865769j,
                -1.62338105 - 0.58391158j,
                0.45615144 - 0.32639457j,
                -1.08497417 + 0.8728092j,
                0.18338797 + 1.32622334j,
                -0.30499348 - 0.46735329j,
                0.96358673 + 1.41642751j,
                1.43672034 - 0.87993065j,
                -0.38524813 + 1.57912814j,
                -1.04437099 - 0.47255215j,
                1.70746664 + 0.41523814j,
                0.47644982 - 0.70304272j,
                1.17402297 + 0.25117723j,
                0.31604692 + 0.4516578j,
            ]
        )
        TM1 = 0
        TM2 = nD
        TM3 = 0
        TM4 = 0
        TM5 = 0
        # TM = n_dis #no of time multiplexing instances
    elif D == 2:
        disp_points = np.array(
            [
                0.34460437 + 0.85366326j,
                -0.55348853 - 0.33102409j,
                0.33118864 + 1.35255651j,
                -1.06454926 - 0.4548616j,
                0.15088578 - 0.89964532j,
                0.39710043 - 0.38911889j,
            ]
        )
        TM1 = nD
        TM2 = 0
        TM3 = 0
        TM4 = 0
        TM5 = 0
elif which_ORENS_or_W == "W":
    print("USING WIGNER OBSERVABLES")
    if D == 6:
        # for D6
        disp_points = np.array(
            [
                -0.785123 + 1.48657418j,
                -1.67098242 + 0.22666372j,
                0.23477004 + 0.53155278j,
                -0.98121628 - 0.73382913j,
                1.30034526 - 0.19658333j,
                0.91057304 - 0.14736838j,
                0.65327309 - 1.15538318j,
                -0.1952535 - 0.0984287j,
                -0.36345514 - 1.25492752j,
                -0.86678666 - 0.27228837j,
                0.50962262 + 0.81069781j,
                0.69155442 - 0.69888758j,
                -0.77472546 + 0.48025564j,
                -1.27414151 - 0.11396373j,
                -0.04185742 + 0.91628513j,
                0.25407875 - 1.70695007j,
                0.00196135 - 0.56262436j,
                0.00304715 + 0.18467356j,
                0.19371779 - 0.92074751j,
                -1.2096629 - 1.16284482j,
                -1.159518 + 0.56868829j,
                0.59088723 + 0.14120895j,
                0.84473373 + 0.45523965j,
                0.49191403 - 0.32179364j,
                -0.45441726 - 0.37142953j,
                -0.58965859 + 0.10145214j,
                1.39193867 - 0.97823193j,
                0.96166038 + 0.86471223j,
                -0.24254956 + 0.54631778j,
                1.67299726 + 0.31620016j,
                -0.67203676 + 1.00506992j,
                0.78077124 + 1.52604695j,
                0.12879202 - 0.167258j,
                -0.3002807 - 0.8619771j,
                0.01810127 + 1.30174108j,
            ]
        )
    elif D == 5:
        # for D5
        disp_points = np.array(
            [
                0.24786904 - 0.62486787j,
                -0.65319438 - 0.09095379j,
                0.06631603 - 0.21158938j,
                0.10886298 + 0.65616421j,
                0.55692114 + 0.37281024j,
                0.56994938 + 0.87208238j,
                0.17100201 + 1.45527183j,
                0.17610646 + 0.14161006j,
                -0.35520102 + 0.97711767j,
                1.02708071 + 0.08556895j,
                -0.19244869 + 0.06274509j,
                0.5351312 - 1.34498428j,
                0.00403814 - 1.04398832j,
                -0.64709337 - 1.31903105j,
                -1.44068577 - 0.28722536j,
                1.40487164 - 0.46299343j,
                -0.81763363 - 0.63269653j,
                -1.00999804 + 0.29107477j,
                0.56738559 - 0.1778157j,
                -1.04361651 + 1.03409932j,
                0.81907933 - 0.64184197j,
                -0.48991989 + 0.44367362j,
                -0.27304522 - 0.60725384j,
                1.2172588 + 0.77913231j,
            ]
        )
    elif D == 4:
        # for D4
        disp_points = np.array(
            [
                -1.10109796 + 0.4076309j,
                0.72841022 + 0.12844961j,
                0.46186563 - 0.53473316j,
                0.90345855 + 0.74884819j,
                -0.23118571 - 0.69918282j,
                0.25423305 + 0.05591663j,
                -0.18912888 + 0.18674846j,
                0.25303334 + 0.63805021j,
                1.1057626 - 0.39203478j,
                -0.69865491 - 0.09812627j,
                -0.87461519 - 0.77616706j,
                0.1648075 - 1.15951834j,
                -0.23149483 + 1.150327j,
                -0.07839235 - 0.25912466j,
                -0.45166399 + 0.5841133j,
            ]
        )
    elif D == 3:
        # for D3
        disp_points = np.array(
            [
                -0.83044623 - 0.06700296j,
                0.1161914 - 0.2761754j,
                -0.29281785 + 0.02531395j,
                -0.30062738 + 0.73010012j,
                0.6721621 - 0.48074157j,
                0.18508371 + 0.22372654j,
                -0.19124917 - 0.8107844j,
                0.64486044 + 0.52234013j,
            ]
        )
    elif D == 2:
        # for D2
        disp_points = np.array(
            [
                0.35792036 - 0.25075055j,
                -0.39611707 - 0.18459237j,
                0.03819648 + 0.43534413j,
            ]
        )
    elif D == 8:
        disp_points = np.array(
            [
                -1.81242085e-01 + 0.03877606j,
                3.96182893e-01 + 1.25836601j,
                5.68769690e-01 - 1.25973808j,
                -1.23126401e00 - 1.17602884j,
                2.10813561e-01 + 0.7717715j,
                -2.06617003e00 + 0.42005687j,
                4.31713092e-02 + 1.86458846j,
                -4.73907886e-01 + 0.13689433j,
                -4.19434645e-01 - 1.02313078j,
                1.73269333e00 - 0.04391586j,
                -1.21374315e00 - 0.03982296j,
                1.02017205e00 + 1.00445636j,
                -1.23056275e00 + 0.72812606j,
                1.75554124e-01 + 0.01941964j,
                -5.75917089e-01 - 0.51882374j,
                -4.06783577e-01 - 0.24075427j,
                -9.21598838e-01 + 0.60754563j,
                3.92856750e-01 + 0.36104036j,
                2.06991594e00 + 0.54691168j,
                -2.70979451e-01 + 0.39739685j,
                8.28314027e-01 + 1.46334427j,
                1.56486952e00 + 0.81985939j,
                -7.18569684e-01 + 1.06923804j,
                -1.62589281e00 + 0.3443794j,
                4.66172723e-02 - 0.82325758j,
                -1.79320667e00 - 0.4106746j,
                1.64861936e-01 - 0.48862386j,
                5.19876532e-01 + 0.02090694j,
                7.83091139e-02 + 0.49371952j,
                7.71976340e-01 - 0.2263395j,
                -8.98844550e-02 + 1.07205525j,
                -1.62607070e-01 - 0.50811855j,
                -1.44658448e00 - 1.52391203j,
                1.06984023e00 + 1.81003463j,
                1.14882616e00 - 0.37114747j,
                6.91378956e-01 + 0.83665937j,
                -8.34530100e-01 + 0.22925488j,
                -7.95448887e-01 - 1.5745425j,
                -1.68059407e-01 + 1.39390594j,
                3.05477414e-01 - 2.12818083j,
                -1.29397148e00 - 0.56796413j,
                1.11163537e00 + 0.51495364j,
                7.77269590e-01 + 0.24694302j,
                1.07463133e00 - 0.04802402j,
                5.20076300e-01 - 0.61989687j,
                1.86425969e00 - 0.97711539j,
                -1.47698371e00 + 0.95775187j,
                8.06403160e-01 - 1.57629982j,
                -2.26850821e-01 + 0.75956599j,
                -4.62204020e-04 - 0.21039659j,
                -2.68362125e-01 - 1.36892016j,
                1.36463540e00 - 0.8449181j,
                -7.57988886e-01 - 0.16836293j,
                -9.35708182e-01 + 1.88863077j,
                1.39317853e00 + 0.06952179j,
                -6.72594571e-01 + 1.55239496j,
                -9.70610498e-01 - 0.47388793j,
                -5.82429152e-01 + 0.55511816j,
                3.13779688e-01 - 1.03382006j,
                3.60796174e-01 - 0.25913995j,
                -7.90470891e-01 - 1.07855436j,
                4.90042162e-02 - 1.71645281j,
                8.62614206e-01 - 0.79896597j,
            ]
        )  # CD = 3.63
    elif D == 7:
        disp_points = np.array(
            [
                0.7817169 + 0.12875163j,
                0.67344872 - 0.36590155j,
                1.32670974 + 0.77015494j,
                -0.00738658 - 0.19811154j,
                -0.24710596 + 0.0074451j,
                -0.54107993 - 0.14626563j,
                -1.06951747 - 1.05109398j,
                0.56682709 + 0.99570697j,
                0.39593489 - 0.73151584j,
                -0.20728181 + 1.08514154j,
                1.42975907 - 0.50164783j,
                -0.0158242 + 0.5988819j,
                -1.09097273 - 0.43215861j,
                -1.32229041 + 0.76564114j,
                -0.90692991 + 0.66963178j,
                0.23072078 - 0.43483337j,
                -1.09220986 + 0.08255017j,
                0.97478703 + 0.52825745j,
                -0.00851934 + 1.44290438j,
                -0.77344652 - 1.64412349j,
                -0.14754108 - 0.89610612j,
                -1.67566641 - 0.91248471j,
                0.40070491 + 0.33047891j,
                -0.01122053 + 1.85799844j,
                0.83538182 - 0.85819876j,
                -1.21394319 + 1.43466269j,
                -0.72553674 - 0.39076863j,
                -1.4963641 - 0.27791179j,
                -0.21425351 - 0.47730205j,
                -0.40479258 + 0.70869588j,
                0.42125916 + 0.70348238j,
                0.23452699 - 1.10145109j,
                -0.62548892 - 0.80839232j,
                1.36202001 + 0.12355114j,
                1.34084281 - 1.23225885j,
                -0.81329759 + 0.24729449j,
                1.87406361 - 0.05843672j,
                -1.85844779 + 0.42940944j,
                1.36358669 + 1.3610392j,
                0.55495614 - 1.39483713j,
                -0.3615917 + 0.3516501j,
                -0.67233882 + 1.22940494j,
                0.76938446 + 1.31465245j,
                -0.25500472 - 1.3498531j,
                0.45970654 - 1.86309486j,
                0.25103948 - 0.01157838j,
                0.9625057 - 0.25101918j,
                0.00814463 + 0.2251781j,
            ]
        )

# EXPERIMENTALLY MEASURED PE OF QUBIT AFTER EACH GRAPE: IMPERFECT STATE PREPARATION
pes_after_grape = np.array(
    [
        ["fock0", "0.006224066390041493"],
        ["fock01", "0.02556237218813906"],
        ["fock0i1", "0.014418125643666324"],
        ["fock02", "0.02694300518134715"],
        ["fock0i2", "0.010395010395010396"],
        ["fock1", "0.032224532224532226"],
        ["fock03", "0.029804727646454265"],
        ["fock0i3", "0.036231884057971016"],
        ["fock12", "0.01975051975051975"],
        ["fock1i2", "0.026915113871635612"],
        ["fock04", "0.024033437826541274"],
        ["fock0i4", "0.03282051282051282"],
        ["fock13", "0.03925619834710744"],
        ["fock1i3", "0.036344755970924195"],
        ["fock2", "0.03319502074688797"],
        ["fock05", "0.034303534303534305"],
        ["fock0i5", "0.025906735751295335"],
        ["fock14", "0.027663934426229508"],
        ["fock1i4", "0.03199174406604747"],
        ["fock23", "0.023784901758014478"],
        ["fock2i3", "0.041884816753926704"],
        ["fock15", "0.03285420944558522"],
        ["fock1i5", "0.04132231404958678"],
        ["fock24", "0.0395010395010395"],
        ["fock2i4", "0.016376663254861822"],
        ["fock3", "0.03711340206185567"],
        ["fock25", "0.0411946446961895"],
        ["fock2i5", "0.030832476875642344"],
        ["fock34", "0.022821576763485476"],
        ["fock3i4", "0.032753326509723645"],
        ["fock35", "0.022797927461139896"],
        ["fock3i5", "0.040123456790123455"],
        ["fock4", "0.03336809176225235"],
        ["fock45", "0.027835051546391754"],
        ["fock4i5", "0.033092037228541885"],
        ["fock5", "0.043343653250773995"],
        ["cat-eve-1", "0.03"],
        ["cat-odd-1", "0.02"],
        ["cat-nop-1", "0.02"],
        ["cat-nmp-1", "0.02"],
    ],
    dtype="<U32",
)
pe_after_grape_avg = np.mean(pes_after_grape[:, 1].astype(float))

# SIMULATED PE OF QUBIT AFTER EACH GRAPE: IMPERFECT STATE PREPARATION
pes_after_grape_sim = np.array(
    [
        ["fock0", "0.006224066390041493"],
        ["fock01", "0.03902894390761001"],
        ["fock0i1", "0.031317781430335166"],
        ["fock02", "0.04213182078674264"],
        ["fock0i2", "0.027239563974053603"],
        ["fock1", "0.05046783434689733"],
        ["fock03", "0.03343545021198867"],
        ["fock0i3", "0.04384857206547538"],
        ["fock12", "0.03386886003306959"],
        ["fock1i2", "0.04799471682807966"],
        ["fock04", "0.03988690905101641"],
        ["fock0i4", "0.044765168580777955"],
        ["fock13", "0.04402936409745748"],
        ["fock1i3", "0.041852257367942104"],
        ["fock2", "0.04014696042006416"],
        ["fock05", "0.030513484662896367"],
        ["fock0i5", "0.03334942561856131"],
        ["fock14", "0.04000635570547568"],
        ["fock1i4", "0.029524427978669457"],
        ["fock23", "0.03514278651241965"],
        ["fock2i3", "0.04436970660752993"],
        ["fock15", "0.03956826767629811"],
        ["fock1i5", "0.036344222987606284"],
        ["fock24", "0.04228206213752891"],
        ["fock2i4", "0.031584517279432664"],
        ["fock3", "0.04319146649112989"],
        ["fock25", "0.04440638854985623"],
        ["fock2i5", "0.027586231455201678"],
        ["fock34", "0.03233385635862057"],
        ["fock3i4", "0.038953355121231985"],
        ["fock35", "0.04423761933364666"],
        ["fock3i5", "0.04119753962767743"],
        ["fock4", "0.04323072662025257"],
        ["fock45", "0.03337575206249634"],
        ["fock4i5", "0.03523000532379052"],
        ["fock5", "0.04304435423470305"],
        ["cat-eve-1", "0.03883704556950226"],
        ["cat-odd-1", "0.04077622630470311"],
        ["cat-nop-1", "0.030923964916586034"],
        ["cat-nmp-1", "0.04120275890492218"],
    ],
    dtype="<U32",
)
pe_after_grape_sim_avg = np.mean(pes_after_grape_sim[:, 1].astype(float))

# BAD T2S USED FOR EXPERIMENT
badt2_list = np.array([22.38912, 10.43408, 3.481396, 1.02416, 0.53468]) * 1e3
badt2_err = (
    np.array(
        [
            0.4461211121133353,
            0.3114348535335567,
            0.11550230998436464,
            0.06189971685022287,
            0.02755214492129271,
        ]
    )
    * 1e3
)

# LIST OF ALL STATES USED IN D6
master_state_list_D6 = np.asarray(
    [
        "fock0",
        "fock01",
        "fock02",
        "fock03",
        "fock04",
        "fock05",
        "fock0i1",
        "fock0i2",
        "fock0i3",
        "fock0i4",
        "fock0i5",
        "fock1",
        "fock12",
        "fock13",
        "fock14",
        "fock15",
        "fock1i2",
        "fock1i3",
        "fock1i4",
        "fock1i5",
        "fock2",
        "fock23",
        "fock24",
        "fock25",
        "fock2i3",
        "fock2i4",
        "fock2i5",
        "fock3",
        "fock34",
        "fock35",
        "fock3i4",
        "fock3i5",
        "fock4",
        "fock45",
        "fock4i5",
        "fock5",
    ],
    dtype="str",
)


# QUTIP SIMULATION
qdim = 3  # GRAPE qubit dim
cdim = 30  # GRAPE cavity dim

q = destroy(qdim)
qd = create(qdim)
ug = basis(qdim, 0)
ue = basis(qdim, 1)

Q = tensor(destroy(qdim), qeye(cdim))
C = tensor(qeye(qdim), destroy(cdim))

Cd, Qd = C.dag(), Q.dag()

T1 = 101e3
T2 = 14.8e3
Tphi = 1 / (1 / T2 - 0.5 / T1)
cavT1 = 1.06e6
nbar_cav = 0.03
nbar_qb = 0.009

low_chi_T2 = 20e3

c_ops_qc = [
    # Qubit Relaxation
    np.sqrt((1 + nbar_qb) / T1) * Q,
    # Qubit Thermal Excitations
    np.sqrt(nbar_qb / T1) * Qd,
    # Qubit Dephasing, changed
    np.sqrt(2 / Tphi) * Qd * Q,
    # Cavity Relaxation
    np.sqrt((1 + nbar_cav) / cavT1) * C,
    # Cavity Thermal Excitations
    np.sqrt(nbar_cav / cavT1) * Cd,
]

chi = 1.423e-3
Kerr = 6e-6
alpha = 175.31e-3

low_chi = 35e-6
Kerr_low_chi = Kerr / 40


H0 = (
    -2 * np.pi * chi * Qd * Q * Cd * C
    - 2 * np.pi * Kerr / 2 * Cd * Cd * C * C
    - 2 * np.pi * alpha / 2 * Qd * Qd * Q * Q
)

H0_low_chi = (
    -2 * np.pi * low_chi * Qd * Q * Cd * C
    - 2 * np.pi * Kerr_low_chi / 2 * Cd * Cd * C * C
    - 2 * np.pi * alpha / 2 * Qd * Qd * Q * Q
)

freq_detune_Q = np.array(
    [
        0,
        chi * -1,
        chi * -2,
        chi * -3,
        chi * -4,
        chi * -5,
        chi * -6,
        chi * -7,
    ]
)
freq_detune_Q_low_chi = np.array(
    [
        0,
        low_chi * -1,
        low_chi * -2,
        low_chi * -3,
        low_chi * -4,
        low_chi * -5,
        low_chi * -6,
        low_chi * -7,
    ]
)

# Wigner waiting time
twait_W = 296

# POWER RABI CALIBRATION TO GET PULSE AMPLITUDES


def power_rabi_amp_calibration(sigma, chop):
    amp = np.linspace(0, 1.5, 199)
    erf = sc.special.erf
    output = []
    for Ax in amp:
        A = (
            np.sqrt(2 / np.pi) / erf(np.sqrt(2)) * np.pi / (4 * sigma) / 2 / np.pi
        )  # initial guess
        A0 = A
        # A0 = 0.00041795955023513456 / 40

        A *= Ax

        H0 = -2 * np.pi * alpha / 2 * qd * qd * q * q

        Hd = 2 * np.pi * A * (qd + q)

        def pulse(t, *arg):
            # global sigma, chop
            t0 = sigma * chop / 2

            g = np.exp(-1 / 2 * (t - t0) ** 2 / sigma**2)

            return g

        H = [H0, [Hd, pulse]]

        rhoq = thermal_dm(qdim, nbar_qb)  # ket2dm(psi)

        tlist = np.linspace(0, sigma * chop, 101)

        c_ops_q = [
            np.sqrt((1 + nbar_qb) / T1) * q,
            np.sqrt(nbar_qb / T1) * qd,
            np.sqrt(2 / Tphi) * qd * q,  # changed
        ]

        e_ops = [
            ue * ue.dag(),
        ]

        options = Options(max_step=4, nsteps=1e6)
        results = mesolve(H, rhoq, tlist, c_ops=c_ops_q, e_ops=e_ops, options=options)

        output += [
            results.expect[0][-1],
        ]

    power_rabi_A = A0 * amp[output.index(max(output))]
    return power_rabi_A


sigma_Q, chop_Q = [250, 4]
sigma_Q_low_chi, chop_Q_low_chi = [10000, 4]
sigma_W, chop_W = [16, 4]


def pulse_Q(t, *arg):
    # global sigma, chop
    t0 = sigma_Q * chop_Q / 2

    g = np.exp(-1 / 2 * (t - t0) ** 2 / sigma_Q**2)

    return g


def pulse_Q_low_chi(t, *arg):
    # global sigma, chop
    t0 = sigma_Q_low_chi * chop_Q_low_chi / 2

    g = np.exp(-1 / 2 * (t - t0) ** 2 / sigma_Q_low_chi**2)

    return g


def pulse_W(t, *arg):
    # global sigma, chop
    t0 = sigma_W * chop_W / 2

    g = np.exp(-1 / 2 * (t - t0) ** 2 / sigma_W**2)

    return g


# With a set of parameters, just need to call the power_rabi_amp_calibration once and set the value manually like shown here
# This will speed up the import of this class by several seconds

# power_rabi_A_Q_low_chi = power_rabi_amp_calibration(sigma_Q_low_chi, chop_Q_low_chi)
# power_rabi_A_W = power_rabi_amp_calibration(sigma_W, chop_W)
power_rabi_A_Q_low_chi = 1.2269645887584445e-05
power_rabi_A_Q = 0.00041795955023513456
power_rabi_A_W = 0.006530617972423978
